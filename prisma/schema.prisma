// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  games Game[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}



model Game {
  id        String   @id @default(cuid())
  name      String
  investigators Investigator[]
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  // scenario tracking
  scenario String?
  // Mythos phase tracking
  mythosPlaceDoom Boolean @default(false)
  mythosDrawP1    Boolean @default(false)
  mythosDrawP2    Boolean @default(false)
  mythosEnd       Boolean @default(false)
  // Enemies phase tracking
  enemiesHunterMove Boolean @default(false)
  enemiesAttack     Boolean @default(false)
  // Upkeep phase tracking
  upkeepUnexhaust  Boolean @default(false)
  upkeepDrawP1     Boolean @default(false)
  upkeepDrawP2     Boolean @default(false)
  upkeepGainRes    Boolean @default(false)
  upkeepCheckHand  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model AllInvestigators {
  id        String   @id @default(cuid())
  code      String @unique
  name      String
  subname   String
  health    Int
  sanity    Int
  skill_willpower Int
  skill_intellect Int
  skill_combat Int
  skill_agility Int
  real_text String
  imagesrc  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Investigator {
  id        String   @id @default(cuid())
  code      String  
  name      String
  subname   String
  health    Int
  sanity    Int
  skill_willpower Int
  skill_intellect Int
  skill_combat Int
  skill_agility Int
  real_text String
  imagesrc  String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId    String
    currentHealth Int?
    currentSanity Int?
    currentResources Int?
    actions Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}